generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Statuses {
  InCart
  InProcess
  Paid
  InDelivery
  Fulfilled
  Declined
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model User {
  id String @id @default(uuid()) @db.Uuid

  email          String @unique
  hashedPassword String

  firstName String?
  lastName  String?
  image     String?

  role         UserRole @default(CUSTOMER)
  refreshToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("users")
}

model Product {
  id                String  @id @default(uuid()) @db.Uuid
  name              String
  description       String?
  article           String?
  image             String
  price             Float
  discount          Float
  quantityAvailable Int
  categoryId        String? @db.Uuid

  isChecked    Boolean
  isBestseller Boolean

  bonuses      Float
  rating       Float?
  reviewAmount Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category?   @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]

  @@map("products")
}

model Category {
  id       String  @id @default(uuid()) @db.Uuid
  name     String
  parentId String? @db.Uuid

  products      Product[]
  subcategories Subcategory[]

  @@map("categories")
}

model Subcategory {
  id               String           @id @default(uuid()) @db.Uuid
  name             String
  categoryId       String           @db.Uuid
  category         Category         @relation(fields: [categoryId], references: [id])
  subsubcategories Subsubcategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subCategories")
}

model Subsubcategory {
  id            String      @id @default(uuid()) @db.Uuid
  name          String
  subcategoryId String      @db.Uuid
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sub_subCategories")
}

model Order {
  id     String   @id @default(uuid()) @db.Uuid
  userId String?  @db.Uuid
  total  Float?
  status Statuses @default(InCart)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User?          @relation(fields: [userId], references: [id])
  orderItems   OrderItem[]
  OrderHistory OrderHistory[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid()) @db.Uuid
  productId String @db.Uuid
  orderId   String @db.Uuid

  quantity  Int
  price     Float // remove
  available Int? // remove

  product Product @relation(fields: [productId], references: [id])
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model ShopSetting {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  value       String
  description String?

  @@map("shop_settings")
}

model OrderHistory {
  id        String   @id @default(uuid()) @db.Uuid
  orderId   String   @db.Uuid
  status    Statuses
  changedAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])

  @@map("order_history")
}
