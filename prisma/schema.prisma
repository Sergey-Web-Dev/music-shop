generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Statuses {
  InCart
  InProcess
  Paid
  InDelivery
  Fulfilled
  Declined
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model User {
  id String @id @default(uuid()) @db.Uuid

  email          String @unique
  hashedPassword String
  salt           String

  firstName String?
  lastName  String?

  role UserRole @default(CUSTOMER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("users")
}

model Product {
  id                String  @id @default(uuid()) @db.Uuid
  name              String
  image             String
  price             Float
  quantityAvailable Int
  description       String?
  categoryId        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]

  @@map("products")
}

model Category {
  id       String  @id @default(uuid()) @db.Uuid
  name     String
  parentId String?

  products      Product[]
  subcategories Subcategory[]

  @@map("categories")
}

model Subcategory {
  id               String           @id @default(uuid()) @db.Uuid
  name             String
  categoryId       String
  category         Category         @relation(fields: [categoryId], references: [id])
  subsubcategories Subsubcategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subCategories")
}

model Subsubcategory {
  id            String      @id @default(uuid()) @db.Uuid
  name          String
  subcategoryId String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sub_subCategories")
}

model Order {
  id     String   @id @default(uuid()) @db.Uuid
  userId String   @default(uuid()) @db.Uuid
  total  Float?
  status Statuses @default(InCart)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid()) @db.Uuid
  productId String
  orderId   String

  quantity  Int
  price     Float
  available Int?

  product Product @relation(fields: [productId], references: [id])
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}
